import { Box, Input, Stack } from "@mui/joy";
import { ChangeEvent, ChangeEventHandler, useEffect, useState } from "react";
import { Joystick, JoystickShape } from "react-joystick-component";
import PowerSettingsNewIcon from "@mui/icons-material/PowerSettingsNew";
import Head from "next/head";

export default function Car() {
	const [ws, setWs] = useState<WebSocket | null>(null);
	const [websocketAddress, setWebsocketAddress] = useState('192.168.1.20');
	const [ipError, setIpError] = useState(false);
	const [joystick, setJoystick] = useState<{ x: number; y: number }>({ x: 0, y: 0 });
	const [websocketConnected, setWebsocketConnected] = useState(false);

	useEffect(() => {
		const connectWebSocket = () => {
			const ipPattern = /^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])){3}$/;
			if (!websocketAddress || !ipPattern.test(websocketAddress)) {
				return;
			}
			const newWs = new WebSocket(`ws://${websocketAddress}:81`);
			newWs.onopen = () => {
				console.log('WebSocket connected');
				setWs(newWs);
				setWebsocketConnected(true); // WebSocket is connected
			};
			newWs.onclose = () => {
				console.log('WebSocket closed');
				setWs(null);
				setWebsocketConnected(false); // WebSocket is disconnected
			};
		};

		connectWebSocket();
	}, [websocketAddress]);


	const sendCoordinates = () => {
		if (ws && ws.readyState === WebSocket.OPEN) {
			ws.send(`{x:${joystick.x}, y:${joystick.y}}`);
			console.log(`{x:${joystick.x}, y:${joystick.y}}`);
		}
	};

	const onMoveX = (eventAxis: any) => {
		if (eventAxis.x) {
			setJoystick((prevJoystick) => ({ ...prevJoystick, x: eventAxis.x }));
		}
	};

	const onMoveY = (eventAxis: any) => {
		if (eventAxis.y) {
			setJoystick((prevJoystick) => ({ ...prevJoystick, y: eventAxis.y }));
		}
	};

	const onStop = (pos: "x" | "y") => () => {
		setJoystick((prevJoystick) => ({
			...prevJoystick,
			...{ [pos === "x" ? "x" : "y"]: 0 },
		}));
	};

	const formatIp = (value: string) => {
		// Remover tudo que não seja número ou ponto
		let formattedValue = value.replace(/[^0-9.]/g, '');

		// Adicionar os pontos corretamente
		if (formattedValue.length > 3 && formattedValue[3] !== '.') {
			formattedValue = formattedValue.slice(0, 3) + '.' + formattedValue.slice(3);
		}
		if (formattedValue.length > 7 && formattedValue[7] !== '.') {
			formattedValue = formattedValue.slice(0, 7) + '.' + formattedValue.slice(7);
		}
		if (formattedValue.length > 11 && formattedValue[11] !== '.') {
			formattedValue = formattedValue.slice(0, 11) + '.' + formattedValue.slice(11);
		}

		// Limitar a 15 caracteres (xxx.xxx.xxx.xxx)
		return formattedValue.substring(0, 15);
	};

	const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
		const value = e.target.value;
		const containsInvalidChars = /[^0-9.]/.test(value);
		if (containsInvalidChars || value.length === 0) {
			setIpError(true);
			return;
		}
		setIpError(false);
		const formattedValue = formatIp(value);
		setWebsocketAddress(formattedValue);
	};
	useEffect(sendCoordinates, [joystick]);

	return (
		<Box>
			<Head>
				<title>Controle | FoodCar</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Stack
				spacing={5}
				direction={"row"}
				sx={{
					justifyContent: "center",
					justifyItems: "center",
					mt: 5,
				}}
			>
				<div>
					x
					<Joystick
						size={200}
						sticky={false}
						baseColor="lightgray"
						stickColor="gray"
						move={onMoveX}
						stop={onStop('x')}
						controlPlaneShape={JoystickShape.AxisX}
					/>
				</div>
				<Stack sx={{ alignItems: "center" }} spacing={2}>
					<PowerSettingsNewIcon
						sx={{
							color: websocketConnected ? 'lightgreen' : 'yellow',
						}}
					/>
					<Input
						onChange={handleChange}
						error={ipError}
						variant="solid"
						startDecorator={<p style={{ color: "white" }}>IP:</p>}
						sx={{
							width: 150,
							justifyContent: "center",
							alignContent: 'center',
							alignItems: 'center',
						}}
						value={websocketAddress}
					/>
				</Stack>
				<Joystick
					size={200}
					sticky={false}
					baseColor="lightgray"
					stickColor="gray"
					move={onMoveY}
					stop={onStop('y')}
					controlPlaneShape={JoystickShape.AxisY}
				/>
				y
			</Stack>
		</Box>
	);
}
